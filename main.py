import asyncio
import sys
import os
import sqlite3
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
import hashlib
import schedule
from dotenv import load_dotenv

load_dotenv()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
IMAGE_FOLDERS = {
    "memes": "/root/bot/cookies/memes_images",
    "love": "/root/bot/cookies/memes_loves",
    "work": "/root/bot/cookies/memes_work",
    "self": "/root/bot/cookies/memes_psy",
    "friendship": "/root/bot/cookies/memes_friendship"
}

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
START_IMAGE_FOLDER = "/root/bot/cookies/start_image"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—á–µ–Ω—å–∫–∏
RANDOM_QUOTE_IMAGE_FOLDER = "/root/bot/cookies/memes_images"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
for folder in list(IMAGE_FOLDERS.values()) + [START_IMAGE_FOLDER, RANDOM_QUOTE_IMAGE_FOLDER]:
    if not os.path.exists(folder):
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder}")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–∏—Ç–∞—Ç
CATEGORIES = {
    "love": {"name": "üíï –õ—é–±–æ–≤—å", "tags": ["–ª—é–±–æ–≤—å", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "—á—É–≤—Å—Ç–≤–∞", "—Å–µ—Ä–¥—Ü–µ"]},
    "self": {"name": "üßò‚Äç‚ôÄÔ∏è –°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ", "tags": ["—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ", "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å", "—Ä–∞–∑–≤–∏—Ç–∏–µ"]},
    "work": {"name": "üíº –†–∞–±–æ—Ç–∞", "tags": ["—Ä–∞–±–æ—Ç–∞", "–∫–∞—Ä—å–µ—Ä–∞", "–±–∏–∑–Ω–µ—Å", "—É—Å–ø–µ—Ö"]},
    "friendship": {"name": "ü§ù –î—Ä—É–∂–±–∞", "tags": ["–¥—Ä—É–∂–±–∞", "–¥—Ä—É–∑—å—è", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–≤–µ—Ä–Ω–æ—Å—Ç—å"]},
    "memes": {"name": "üòÇ –ú–µ–º–Ω—ã–µ", "tags": ["—é–º–æ—Ä", "—Å–º–µ—à–Ω–æ–µ", "–∏—Ä–æ–Ω–∏—è", "–≤–µ—Å–µ–ª—å–µ"]}
}

# –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è "–ø–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ"
RANDOM_ACTIONS = [
    "–ü–æ–≥–ª–∞–¥—å —Å–≤–æ–µ–≥–æ –∫–æ—Ç–∞ –∏–ª–∏ —Å–æ–±–∞–∫—É (–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç - –≤–æ–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞) üê±",
    "–°–∫–∞–∂–∏ –º–∞–º–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä–æ –µ–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ üëó",
    "–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º –≥–æ–≤–æ—Ä–∏—Ç '—Å–ø–∞—Å–∏–±–æ' üíß",
    "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π –ø—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏ üí™",
    "–ù–∞–ø–∏—à–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É, —Å –∫–æ—Ç–æ—Ä—ã–º –¥–∞–≤–Ω–æ –Ω–µ –æ–±—â–∞–ª—Å—è üì±",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ –∏ –Ω–∞–π–¥–∏ —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ, —á–µ–≥–æ —Ä–∞–Ω—å—à–µ –Ω–µ –∑–∞–º–µ—á–∞–ª üå∏",
    "–û–±–Ω–∏–º–∏ —Å–µ–±—è –∑–∞ –ø–ª–µ—á–∏ –∏ —Å–∫–∞–∂–∏: '–Ø –º–æ–ª–æ–¥–µ—Ü!' ü§ó",
    "–°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–¥–æ—Ö 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ üå¨",
    "–í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é –∏ –ø–æ—Ç–∞–Ω—Ü—É–π —Ö–æ—Ç—è –±—ã –º–∏–Ω—É—Ç—É üíÉ",
    "–ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 3 –≤–µ—â–µ–π, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω —Å–µ–≥–æ–¥–Ω—è ‚úçÔ∏è",
    "–£–ª—ã–±–Ω–∏—Å—å —Å–≤–æ–µ–º—É –æ—Ç—Ä–∞–∂–µ–Ω–∏—é –≤ –∑–µ—Ä–∫–∞–ª–µ üòä",
    "–ü—Ä–∏–±–µ—Ä–∏—Å—å –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –∏–ª–∏ –≤ –æ–¥–Ω–æ–º —è—â–∏–∫–µ üóÇ",
    "–ü–æ–∑–≤–æ–Ω–∏ –±–∞–±—É—à–∫–µ –∏–ª–∏ –¥–µ–¥—É—à–∫–µ (–∏–ª–∏ –≤—Å–ø–æ–º–Ω–∏ –æ –Ω–∏—Ö —Å —Ç–µ–ø–ª–æ—Ç–æ–π) üëµ",
    "–°—ä–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ - —Ñ—Ä—É–∫—Ç, –æ—Ä–µ—Ö –∏–ª–∏ –π–æ–≥—É—Ä—Ç üçé",
    "–í—ã–π–¥–∏ –Ω–∞ –±–∞–ª–∫–æ–Ω –∏–ª–∏ –∫ –æ–∫–Ω—É –∏ –ø–æ–¥—ã—à–∏ —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º üå¨",
    "–°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–º—É –≤—Å—Ç—Ä–µ—á–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É (–∏–ª–∏ —á–ª–µ–Ω—É —Å–µ–º—å–∏) üíñ",
    "–ü–æ—Ç—è–Ω–∏—Å—å –∫–∞–∫ –∫–æ—à–∫–∞ - —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö, —Å–ø–∏–Ω—É –ø—Ä–æ–≥–Ω–∏ üôÜ‚Äç‚ôÄÔ∏è",
    "–ó–∞–ø–∏—à–∏ –æ–¥–Ω—É –∏–¥–µ—é –∏–ª–∏ –º—ã—Å–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—à–ª–∞ –≤ –≥–æ–ª–æ–≤—É —Å–µ–≥–æ–¥–Ω—è üí°",
    "–ü–æ—à–ª–∏ —Å–º–µ—à–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥—Ä—É–≥—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä üòÑ",
    "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —Å–µ–±—è –∑–∞ —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ, —á—Ç–æ —Å–¥–µ–ª–∞–ª –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ üåü",
    "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–≥–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üì∏",
    "–ü–æ—á–∏—Ç–∞–π –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª—é–±–∏–º–æ–π –∫–Ω–∏–≥–∏ üìö",
    "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∏–∑ 4 —Å—Ç—Ä–æ–∫ ‚úçÔ∏è",
    "–ü–æ—Å–ª—É—à–∞–π –∑–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã 5 –º–∏–Ω—É—Ç (–∏–ª–∏ –≤–∫–ª—é—á–∏ –∏—Ö –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ) üåø",
    "–°–¥–µ–ª–∞–π –ø–ª–∞–Ω–∫—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥ üèãÔ∏è‚Äç‚ôÄÔ∏è",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —É–ª—ã–±–Ω–∏—Å—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º üì∑",
    "–°–∫–∞–∂–∏ '—Å–ø–∞—Å–∏–±–æ' —Ç—Ä–µ–º —Ä–∞–∑–Ω—ã–º –ª—é–¥—è–º –∑–∞ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ üôè",
    "–°–¥–µ–ª–∞–π 5 –≥–ª—É–±–æ–∫–∏—Ö –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π —Å–∏–ª—É –≤ –Ω–æ–≥–∞—Ö ü¶µ",
    "–ù–∞–ø–∏—à–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∏ –æ—Å—Ç–∞–≤—å –µ–≥–æ –≥–¥–µ-—Ç–æ –¥–ª—è –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ üíå",
    "–ü–æ–º–µ–¥–∏—Ç–∏—Ä—É–π 3 –º–∏–Ω—É—Ç—ã - –ø—Ä–æ—Å—Ç–æ —Å–∏–¥–∏ —Ç–∏—Ö–æ –∏ –¥—ã—à–∏ ‚òØÔ∏è",
    "–ù–∞—Ä–∏—Å—É–π —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ - —Å–æ–ª–Ω—Ü–µ, –æ–±–ª–∞–∫–æ, —Å–º–∞–π–ª–∏–∫ üé®",
    "–í—ã—É—á–∏ –æ–¥–Ω–æ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ üåç",
    "–°–¥–µ–ª–∞–π –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –¥–ª—è —Å–æ—Å–µ–¥–∞ –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∏ ü§ù",
    "–ü–æ–≥—É–ª—è–π 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ üö∂‚Äç‚ôÄÔ∏è",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube (–Ω–µ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç) üé¨",
    "–û—Ä–≥–∞–Ω–∏–∑—É–π —á—Ç–æ-—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ: –∫–æ—à–µ–ª–µ–∫, —Å—É–º–∫—É –∏–ª–∏ –ø–æ–ª–∫—É üì¶",
    "–ü–æ–∑–≤–æ–Ω–∏ —Å—Ç–∞—Ä–æ–º—É –¥—Ä—É–≥—É –∏ —Å–∫–∞–∂–∏, —á—Ç–æ —Å–∫—É—á–∞–µ—à—å üìû",
    "–°–¥–µ–ª–∞–π 20 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π, –∫–∞–∫ —Ä–∞–∑–≥–æ–Ω—è–µ—Ç—Å—è –∫—Ä–æ–≤—å üèÉ‚Äç‚ôÄÔ∏è",
    "–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –±—É–¥—É—â–µ–º—É —Å–µ–±–µ (–Ω–∞ 1 –≥–æ–¥ –≤–ø–µ—Ä–µ–¥) üìù",
    "–ü–æ–∫–æ—Ä–º–∏ –ø—Ç–∏—Ü –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∞–±–ª—é–¥–∞–π –∑–∞ –Ω–∏–º–∏ üê¶"
]

# –ö—ç—à –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
USED_CONTENT_CACHE = {}

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
BUILTIN_QUOTES = {
    "love": [
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –Ω–µ –∏—Å–∫–∞—Ç—å –∏–¥–µ–∞–ª, –∞ –≤–∏–¥–µ—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –µ–≥–æ.", "author": "–ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏"},
        {"text": "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–∏–¥–µ—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Ç–∞–∫–∏–º, –∫–∞–∫–∏–º –µ–≥–æ –∑–∞–¥—É–º–∞–ª –ë–æ–≥.", "author": "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π"},
        {"text": "–í –ª—é–±–≤–∏ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–µ–±—è, –æ—Ç–¥–∞–≤–∞—è –¥—Ä—É–≥–æ–º—É.", "author": "–ú–∞—Ä–∏–Ω–∞ –¶–≤–µ—Ç–∞–µ–≤–∞"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Å–µ—Ä–¥—Ü–µ –ø–æ—ë—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–∞–∑—É–º –º–æ–ª—á–∏—Ç.", "author": "–≠—Ä–∏—Ö –ú–∞—Ä–∏—è –†–µ–º–∞—Ä–∫"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∞—è –ª—é–±–æ–≤—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏—è.", "author": "–û—à–æ"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞ –±—ã—Ç—å —Å–æ–±–æ–π —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º.", "author": "–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω"},
        {"text": "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –¥–µ–ª–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–¥–æ—Å—Ç—å, –Ω–æ –∏ –±–æ–ª—å.", "author": "–•–∞–ª–∏–ª—å –î–∂–µ–±—Ä–∞–Ω"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã —Å—Ç–∞–≤–∏—à—å —Å—á–∞—Å—Ç—å–µ –¥—Ä—É–≥–æ–≥–æ –≤—ã—à–µ —Å–≤–æ–µ–≥–æ.", "author": "–î–∂–µ–π–Ω –û—Å—Ç–∏–Ω"},
        {"text": "–í –ª—é–±–≤–∏ –Ω–µ—Ç —Å—Ç—Ä–∞—Ö–∞, –Ω–æ –µ—Å—Ç—å –æ—Ç–≤–∞–≥–∞ –±—ã—Ç—å —É—è–∑–≤–∏–º—ã–º.", "author": "–ë—Ä–µ–Ω–µ –ë—Ä–∞—É–Ω"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö.", "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–∞, –∞ –ø–æ—Å—Ç—É–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–≤–æ—Ä—è—Ç –≥—Ä–æ–º—á–µ.", "author": "–û–¥—Ä–∏ –•–µ–ø–±—ë—Ä–Ω"},
        {"text": "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–æ–º —Å–≤–æ–π –¥–æ–º.", "author": "–†–∞–±–∏–Ω–¥—Ä–∞–Ω–∞—Ç –¢–∞–≥–æ—Ä"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—ã –≤–º–µ—Å—Ç–µ —Ä–∞—Å—Ç—ë—Ç–µ, –∞ –Ω–µ —Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç–µ—Å—å.", "author": "–ú–∞–¥–æ–Ω–Ω–∞"},
        {"text": "–í –ª—é–±–≤–∏ –≤–∞–∂–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å, –∞ —Ç–æ, —á—Ç–æ –æ—Ç–¥–∞—ë—à—å.", "author": "–í–∏–∫—Ç–æ—Ä –ì—é–≥–æ"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —Å–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≥–∞—Å–Ω–µ—Ç –¥–∞–∂–µ –≤ —Ç–µ–º–Ω–æ—Ç–µ.", "author": "–ê–Ω–Ω–∞ –ê—Ö–º–∞—Ç–æ–≤–∞"},
        {"text": "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Ü–µ–ª–∏–∫–æ–º, —Å –µ–≥–æ —Å–≤–µ—Ç–æ–º –∏ —Ç–µ–Ω—è–º–∏.", "author": "–≠–ª—å—á–∏–Ω –°–∞—Ñ–∞—Ä–ª–∏"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∫–∞, –∞ –¥–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞.", "author": "–¢–æ–Ω–∏ –ú–æ—Ä—Ä–∏—Å–æ–Ω"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –¥–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ–∑–¥–∞—é—Ç —Å–≤–æ—é –≤—Å–µ–ª–µ–Ω–Ω—É—é.", "author": "–ò–≤–∞–Ω –ë—É–Ω–∏–Ω"},
        {"text": "–õ—é–±–æ–≤—å ‚Äî —ç—Ç–æ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞—é—Ç —Å–µ—Ä–¥—Ü–∞ –±–µ–∑ —Å–ª–æ–≤.", "author": "–†–æ–±–∏–Ω –£–∏–ª—å—è–º—Å"},
        {"text": "–õ—é–±–∏—Ç—å ‚Äî –∑–Ω–∞—á–∏—Ç –≤–∏–¥–µ—Ç—å —á—É–¥–æ –≤ –æ–±—ã–¥–µ–Ω–Ω–æ–º.", "author": "–ü–∞—É–ª–æ –ö–æ—ç–ª—å–æ"}
    ],
    "self": [
        {"text": "–ë—É–¥—å —Å–æ–±–æ–π ‚Äî –º–∏—Ä –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—Å—è –ø–æ–¥ —Ç–≤–æ—é —Å–º–µ–ª–æ—Å—Ç—å.", "author": "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"},
        {"text": "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —Ç–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏, –∏ –±–æ–ª—å—à–µ, —á–µ–º —Ç–≤–æ–∏ —Å–æ–º–Ω–µ–Ω–∏—è.", "author": "–ú–∞–ª–∞–ª–∞ –Æ—Å–∞—Ñ–∑–∞–π"},
        {"text": "–°–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≥–¥–µ –∫–∞—Ä—Ç–∞ —Ä–∏—Å—É–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏.", "author": "–°–æ–∫—Ä–∞—Ç"},
        {"text": "–¢–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –¥–∞—Ä, –∞ –Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫.", "author": "–õ–µ–¥–∏ –ì–∞–≥–∞"},
        {"text": "–ù–µ –±–æ–π—Å—è —Å–≤–æ–∏—Ö –æ—à–∏–±–æ–∫ ‚Äî –æ–Ω–∏ —Ç–≤–æ–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è.", "author": "–û–ø—Ä–∞ –£–∏–Ω—Ñ—Ä–∏"},
        {"text": "–¢—ã ‚Äî –Ω–µ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π —Å–ª—É—á–∏–ª–æ—Å—å, –∞ —Ç–æ, —á—Ç–æ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.", "author": "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥"},
        {"text": "–°–ª—É—à–∞–π —Å–≤–æ—ë —Å–µ—Ä–¥—Ü–µ ‚Äî –æ–Ω–æ –∑–Ω–∞–µ—Ç –ø—É—Ç—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –∑–Ω–∞–µ—Ç —Ä–∞–∑—É–º.", "author": "–°—Ç–∏–≤ –î–∂–æ–±—Å"},
        {"text": "–¢–≤–æ–∏ –º–µ—á—Ç—ã ‚Äî —ç—Ç–æ –∫–æ–º–ø–∞—Å, –∞ –Ω–µ –∫–ª–µ—Ç–∫–∞.", "author": "–§—Ä–∏–¥–∞ –ö–∞–ª–æ"},
        {"text": "–ë—É–¥—å —Å–≤–µ—Ç–æ–º –¥–ª—è —Å–µ–±—è, –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Å–ª–µ–¥—É—é—Ç –∑–∞ —Ç–æ–±–æ–π.", "author": "–ë—É–¥–¥–∞"},
        {"text": "–¢—ã ‚Äî –Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫, –∞ —à–µ–¥–µ–≤—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è.", "author": "–í–∏–Ω—Å–µ–Ω—Ç –í–∞–Ω –ì–æ–≥"},
        {"text": "–°–∏–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è.", "author": "–ù–µ–ª—å—Å–æ–Ω –ú–∞–Ω–¥–µ–ª–∞"},
        {"text": "–¢–≤–æ—è –¥—É—à–∞ ‚Äî —ç—Ç–æ —Å–∞–¥, –≥–¥–µ —Ä–∞—Å—Ç—É—Ç —Ç–≤–æ–∏ –º–µ—á—Ç—ã.", "author": "–†—É–º–∏"},
        {"text": "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ ‚Äî —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞.", "author": "–≠–º–∏–ª–∏ –î–∏–∫–∏–Ω—Å–æ–Ω"},
        {"text": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä —Å–≤–æ–µ–π —Å—É–¥—å–±—ã, –ø–∏—à–∏ —Å–º–µ–ª–æ.", "author": "–ú–∞–π—è –ê–Ω–¥–∂–µ–ª–æ—É"},
        {"text": "–°–æ–º–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Ç–µ–Ω–∏, –∞ —Ç—ã ‚Äî —Å–≤–µ—Ç.", "author": "–ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏"},
        {"text": "–¢–≤–æ—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á—É–∂–∏—Ö –ª–∞–π–∫–æ–≤.", "author": "–ë–µ–π–æ–Ω—Å–µ"},
        {"text": "–†–∞—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ —Ç—ã –ø–æ—Å–∞–∂–µ–Ω, –∏ —Ü–≤–µ—Ç–∏.", "author": "–≠—Ä–∏—Ö –§—Ä–æ–º–º"},
        {"text": "–¢—ã ‚Äî –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, –∞ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ—Ç –º–∏—Ä.", "author": "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω"},
        {"text": "–¢–≤–æ—è –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ö–æ–ª—Å—Ç, —Ä–∏—Å—É–π —è—Ä–∫–æ.", "author": "–ú–∞—Ä–∫ –®–∞–≥–∞–ª"},
        {"text": "–ë—É–¥—å –≤–µ—Ä–µ–Ω —Å–µ–±–µ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π —É—Å–ø–µ—Ö.", "author": "–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä"}
    ],
    "work": [
        {"text": "–ù–∞–π–¥–∏ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∂–∏–≥–∞–µ—Ç —Ç–µ–±—è, –∏ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.", "author": "–ö–æ–Ω—Ñ—É—Ü–∏–π"},
        {"text": "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∏—à, –∞ –∫–∞–∂–¥—ã–π —à–∞–≥ –∫ —Ü–µ–ª–∏.", "author": "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"},
        {"text": "–¢–≤–æ–π —Ç—Ä—É–¥ ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å–ª–µ–¥ –≤ –º–∏—Ä–µ.", "author": "–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏"},
        {"text": "–ú–µ—á—Ç—ã –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.", "author": "–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω"},
        {"text": "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —É—Ä–æ–∫, –∞ –Ω–µ –ø—Ä–æ–≤–∞–ª.", "author": "–ò–ª–æ–Ω –ú–∞—Å–∫"},
        {"text": "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ –¥–µ–Ω—å–≥–∏, –∞ –ø—Ä–æ —Å–º—ã—Å–ª.", "author": "–°—Ç–∏–≤ –î–∂–æ–±—Å"},
        {"text": "–¢–≤–æ—è —Å—Ç—Ä–∞—Å—Ç—å ‚Äî —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ–ª.", "author": "–ú–∞–π–∫–ª –î–∂–æ—Ä–¥–∞–Ω"},
        {"text": "–ù–µ –±–æ–π—Å—è –Ω–∞—á–∏–Ω–∞—Ç—å —Å –º–∞–ª–æ–≥–æ ‚Äî –≤–µ–ª–∏–∫–æ–µ —Ä–∞—Å—Ç—ë—Ç –∏–∑ –º–µ–ª–æ—á–µ–π.", "author": "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥"},
        {"text": "–î–µ–ª–∞–π —Ç–æ, —á—Ç–æ –ª—é–±–∏—à—å, –∏ –º–∏—Ä –Ω–∞–π–¥—ë—Ç —Ç–µ–±–µ –º–µ—Å—Ç–æ.", "author": "–ö–æ–∫–æ –®–∞–Ω–µ–ª—å"},
        {"text": "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ —Å–¥–∞—ë—à—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞–ª.", "author": "–°–µ—Ä–µ–Ω–∞ –£–∏–ª—å—è–º—Å"},
        {"text": "–¢–≤–æ–π —Ñ–æ–∫—É—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–≤–æ—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.", "author": "–î–∂–æ—Ä–¥–∂ –õ—É–∫–∞—Å"},
        {"text": "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä.", "author": "–ú–∞–ª–∫–æ–ª—å–º –ì–ª–∞–¥—É—ç–ª–ª"},
        {"text": "–ù–µ –∂–¥–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞–π –µ–≥–æ.", "author": "–®–µ—Ä–∏–ª –°—ç–Ω–¥–±–µ—Ä–≥"},
        {"text": "–¢–≤–æ–π —Ç—Ä—É–¥ ‚Äî —ç—Ç–æ –º–æ—Å—Ç –∫ —Ç–≤–æ–∏–º –º–µ—á—Ç–∞–º.", "author": "–ú–∞—Ä–∏—è –ö—é—Ä–∏"},
        {"text": "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥ ‚Äî —ç—Ç–æ –ø–æ–±–µ–¥–∞ –Ω–∞–¥ —Å—Ç—Ä–∞—Ö–æ–º.", "author": "–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞"},
        {"text": "–†–∞–±–æ—Ç–∞ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.", "author": "–ü–∞–±–ª–æ –ü–∏–∫–∞—Å—Å–æ"},
        {"text": "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–º–µ–ª–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –∏ —É–ø–æ—Ä—Å—Ç–≤–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", "author": "–ê–Ω–Ω–∞ –í–∏–Ω—Ç—É—Ä"},
        {"text": "–¢–≤–æ–∏ –∏–¥–µ–∏ ‚Äî —ç—Ç–æ –∏—Å–∫—Ä—ã, –∑–∞–∂–∏–≥–∞—é—â–∏–µ –±—É–¥—É—â–µ–µ.", "author": "–≠–ª–æ–Ω –ú–∞—Å–∫"},
        {"text": "–†–∞–±–æ—Ç–∞–π —É–ø–æ—Ä–Ω–æ, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –º–µ—á—Ç–∞—Ç—å.", "author": "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¢–µ—Ä–µ—à–∫–æ–≤–∞"},
        {"text": "–¢–≤–æ–π –ø—É—Ç—å ‚Äî —ç—Ç–æ –Ω–µ –≥–æ–Ω–∫–∞, –∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.", "author": "–†–∏—á–∞—Ä–¥ –ë—Ä—ç–Ω—Å–æ–Ω"}
    ],
    "friendship": [
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ —Ç–µ, –∫—Ç–æ –≤–∏–¥–∏—Ç —Ç–µ–±—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏ –æ—Å—Ç–∞—ë—Ç—Å—è —Ä—è–¥–æ–º.", "author": "–ú–∞—Ä–∫ –¢–≤–µ–Ω"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥ ‚Äî —ç—Ç–æ —Ç–æ—Ç, —Å –∫–µ–º –º–æ–∂–Ω–æ –º–æ–ª—á–∞—Ç—å –∏ –±—ã—Ç—å –ø–æ–Ω—è—Ç—ã–º.", "author": "–≠—Ä–Ω–µ—Å—Ç –•–µ–º–∏–Ω–≥—É—ç–π"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Å–µ—Ä–¥—Ü–∞ –±—å—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä–∏—Ç–º–µ.", "author": "–ß–∞—Ä–ª—å–∑ –î–∏–∫–∫–µ–Ω—Å"},
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ —Å–µ–º—å—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º.", "author": "–î–∂–µ—Å—Å–∏–∫–∞ –ê–ª—å–±–∞"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∞—è –¥—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ —Å–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≥–∞—Å–Ω–µ—Ç –≤ –±—É—Ä—é.", "author": "–•–∞–ª–∏–ª—å –î–∂–µ–±—Ä–∞–Ω"},
        {"text": "–î—Ä—É–≥ ‚Äî —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –∑–Ω–∞–µ—Ç —Ç–≤–æ–∏ —Å–ª–∞–±–æ—Å—Ç–∏ –∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–æ–±–æ–π –≥–æ—Ä–¥–∏—Ç—Å—è.", "author": "–≠–ª—å—á–∏–Ω –°–∞—Ñ–∞—Ä–ª–∏"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Å–º–µ—Ö –æ–¥–Ω–æ–≥–æ –∑–∞—Ä–∞–∂–∞–µ—Ç –¥—Ä—É–≥–æ–≥–æ.", "author": "–†–æ–±–∏–Ω –£–∏–ª—å—è–º—Å"},
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ —Ç–µ, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π –º–∏—Ä —è—Ä—á–µ.", "author": "–¢–µ–π–ª–æ—Ä –°–≤–∏—Ñ—Ç"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –º–∞—è–∫ –≤ –ª—é–±–æ–π —Ç–µ–º–Ω–æ—Ç–µ.", "author": "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–µ—á, –∞ –ø—Ä–æ –≥–ª—É–±–∏–Ω—É —Å–≤—è–∑–∏.", "author": "–ú–∞–π—è –ê–Ω–¥–∂–µ–ª–æ—É"},
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ —Ç–µ, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ —Ç–µ–±—è, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç—ã —Å–∞–º —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è.", "author": "–û–ø—Ä–∞ –£–∏–Ω—Ñ—Ä–∏"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—ã –≤–º–µ—Å—Ç–µ —Ä–∞—Å—Ç—ë—Ç–µ, –∞ –Ω–µ —Ç—è–Ω–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞–∑–∞–¥.", "author": "–ö. –°. –õ—å—é–∏—Å"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥ ‚Äî —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –≤—Å–µ —É—Ö–æ–¥—è—Ç.", "author": "–£–æ–ª—Ç–µ—Ä –£–∏–Ω—á–µ–ª–ª"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –º–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ—è—Ç –¥–≤–æ–µ.", "author": "–ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏"},
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ —Ç–µ, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π —Å–º–µ—Ö –≥—Ä–æ–º—á–µ, –∞ —Å–ª—ë–∑—ã –ª–µ–≥—á–µ.", "author": "–úarge—Ä–∏—Ç–∞ –ü—É—à–∫–∏–Ω–∞"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –±–æ–∏—à—å—Å—è –±—ã—Ç—å —Å–æ–±–æ–π.", "author": "–≠–º–∏–ª–∏ –î–∏–∫–∏–Ω—Å–æ–Ω"},
        {"text": "–ù–∞—Å—Ç–æ—è—â–∏–π –¥—Ä—É–≥ ‚Äî —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –≤–∏–¥–∏—Ç —Ç–≤–æ—é –±–æ–ª—å –∑–∞ —É–ª—ã–±–∫–æ–π.", "author": "–§—Ä—ç–Ω—Å–∏—Å –ë—ç–∫–æ–Ω"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ —Ç—ë–ø–ª–æ–µ —É–±–µ–∂–∏—â–µ –≤ —Ö–æ–ª–æ–¥–Ω–æ–º –º–∏—Ä–µ.", "author": "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"},
        {"text": "–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ –∑–≤—ë–∑–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤–µ—Ç—è—Ç –≤ —Ç–≤–æ–µ–π –Ω–æ—á–∏.", "author": "–í–∏–∫—Ç–æ—Ä –ì—é–≥–æ"},
        {"text": "–î—Ä—É–∂–±–∞ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—ã –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞—ë—Ç–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≥—Ä–µ—é—Ç –≥–æ–¥—ã.", "author": "–≠–ª–∏–∑–∞–±–µ—Ç –¢–µ–π–ª–æ—Ä"}
    ],
    "memes": [
        {"text": "–ù–µ —Ç–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è–ª, –Ω–æ –ø–æ–Ω—è–ª", "author": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"},
        {"text": "–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã –º–Ω–µ –≤—Å—ë –æ–±—ä—è—Å–Ω–∏–ª–∏. –ü–ª–æ—Ö–æ, —á—Ç–æ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª", "author": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"},
        {"text": "–¢—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å–æ–∑–¥–∞—é—Ç —Å–∏–ª—å–Ω—ã—Ö –∫–æ—Ç—è—Ç", "author": "–ú—É–¥—Ä–µ—Ü –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"},
        {"text": "–ù–µ —Ç–µ—Ä–ø–∏–ª–∞, –∞ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏–Ω—è—Ç–∏–µ", "author": "–ì–µ–Ω–∏–π –ø–æ–¥—ä–µ–∑–¥–∞"},
        {"text": "–° –¥–æ–±—Ä—ã–º–∏ —ç—Ç–∏–º–∏ –≤–∞—à–∏–º–∏ —É—Ç—Ä–∞–º–∏...", "author": "–§–∏–ª–æ—Å–æ—Ñ —á–∞—Ç–∞"},
        {"text": "–î–µ—Ä–∂—É –±–∞–ª–∞–Ω—Å... –Ω–æ —Å–∫–æ—Ä–æ –Ω–µ –≤—ã–¥–µ—Ä–∂—É", "author": "–ö–æ—Ä–æ–ª—å —Ç–≤–∏—Ç—Ç–µ—Ä–∞"},
        {"text": "–ü–æ—Å–º–æ—Ç—Ä–∏ –¥–æ —á–µ–≤–æ —Ç—ã –º–µ–Ω—è –¥–æ–≤–æ–¥–µ—à...", "author": "–ú–∞—Å—Ç–µ—Ä –º–µ–º–æ–≤"},
        {"text": "–¢–∏–±–µ —Ç–æ–ª—å–∫–æ —Ö–∏—Ö–∞–Ω—å–∫–∏ –¥–∞ —Ö–∞—Ö–∞–Ω—å–∫–∏", "author": "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–µ–Ω–∏–π"},
        {"text": "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –Ω–∏–∫–æ–º—É –∏—Å–ø–æ—Ä—Ç–∏—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å. –≠—Ç–æ –¢–í–û–ô –¥–µ–Ω—å - –∏—Å–ø–æ—Ä—Ç—å –µ–≥–æ —Å–∞–º!", "author": "–õ–µ–≥–µ–Ω–¥–∞ —Ñ–æ—Ä—É–º–∞"},
        {"text": "–°–Ω–æ–≤–∞ —ç—Ç–∏ –∫–∞–∫ –∏—Ö —Ç–∞–º... –º—ã—Å–ª–∏", "author": "–ì—É—Ä—É —Å–æ—Ü—Å–µ—Ç–µ–π"},
        {"text": "–ñ–∏–∑–Ω—å –∫–æ—Ä–æ—Ç–∫–∞. –û–±–≤–∏–Ω–∏ –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ –≤ —Å–≤–æ–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏ –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ", "author": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"},
        {"text": "–ñ–∏–∑–Ω—å –≥—Ä—É—Å—Ç–Ω–∞—è, –∑–∞—Ç–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–º–µ—à–Ω–∞—è", "author": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"},
        {"text": "–û–¥–Ω–∞ –æ—à–∏–±–∫–∞ –∏ —Ç—ã –æ—à–∏–±—Å—è ", "author": "–ú—É–¥—Ä–µ—Ü –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"},
        {"text": "–ê–±–æ–Ω–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Å–∏—Ö—É–µ—Ç", "author": "–ì–µ–Ω–∏–π –ø–æ–¥—ä–µ–∑–¥–∞"},
        {"text": "–£–∂–µ –∑–∞–≤—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–Ω–µ—Ç –≤—á–µ—Ä–∞", "author": "–§–∏–ª–æ—Å–æ—Ñ —á–∞—Ç–∞"},
        {"text": "–•–æ—Ä–æ—à–æ, —è –≤—Å—ë —Å–¥–µ–ª–∞—é! (–Ø –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—é)", "author": "–ö–æ—Ä–æ–ª—å —Ç–≤–∏—Ç—Ç–µ—Ä–∞"},
        {"text": "–ö–∞—Ä—Ç—ã –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —Ç—ã —É–º–Ω–∏—á–∫–∞", "author": "–ú–∞—Å—Ç–µ—Ä –º–µ–º–æ–≤"},
        {"text": "–Ø –±—ã —Ç–æ–ª—å–∫–æ —Å–ø–∞–ª –∏ —Å–ø–∞–ª. –ò —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª –∏ —Å–ø–∞–ª...", "author": "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≥–µ–Ω–∏–π"},
        {"text": "–®—Ç–æ—à... –ª–∞–¥–Ω–æ, —è —É–≤–∞–∂–∞—é —Ç–≤–æ—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–Ω–µ–Ω–∏–µ", "author": "–ö–∞–∫ –∑–∞–≤–µ—â–∞–ª–∞ –Æ–ª—è"},
        {"text": "–°–ª–æ–≤–∞–º–∏ –Ω–µ –æ–ø–∏—Å–∞—Ç—å, –∫–∞–∫ —è —Å—á–∞—Å—Ç–ª–∏–≤, –Ω–æ –º–æ–∂–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏ - 0/10", "author": "–ì—É—Ä—É —Å–æ—Ü—Å–µ—Ç–µ–π"}
    ]
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class Database:
    def __init__(self, db_path="bot_data.db"):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ —Ü–∏—Ç–∞—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS quotes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL,
                author TEXT,
                category TEXT,
                source TEXT
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                quotes_received INTEGER DEFAULT 0,
                favorite_category TEXT
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id INTEGER,
                date TEXT,
                quotes_count INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS daily_category_usage (
                user_id INTEGER,
                category TEXT,
                date TEXT,
                PRIMARY KEY (user_id, category, date),
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')

        conn.commit()
        conn.close()

    def add_user(self, user_id, username, first_name, last_name):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        conn.commit()
        conn.close()

    def get_all_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users')
        users = cursor.fetchall()
        conn.close()
        return [user[0] for user in users]

    def get_user_stats(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        return user

    def update_user_stats(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET quotes_received = quotes_received + 1 
            WHERE user_id = ?
        ''', (user_id,))

        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            INSERT OR REPLACE INTO user_stats (user_id, date, quotes_count)
            VALUES (?, ?, COALESCE((SELECT quotes_count FROM user_stats WHERE user_id = ? AND date = ?), 0) + 1)
        ''', (user_id, today, user_id, today))

        conn.commit()
        conn.close()

    def check_category_usage(self, user_id, category):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today().strftime('%Y-%m-%d')
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT 1 FROM daily_category_usage 
            WHERE user_id = ? AND category = ? AND date = ?
        ''', (user_id, category, today))
        result = cursor.fetchone()
        conn.close()
        return bool(result)

    def mark_category_used(self, user_id, category):
        """–û—Ç–º–µ—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è"""
        today = date.today().strftime('%Y-%m-%d')
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO daily_category_usage (user_id, category, date)
            VALUES (?, ?, ?)
        ''', (user_id, category, today))
        conn.commit()
        conn.close()

    def add_quote(self, text, author, category, source="Russian Quotes API"):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO quotes (text, author, category, source)
            VALUES (?, ?, ?, ?)
        ''', (text, author, category, source))
        conn.commit()
        conn.close()

    def get_quotes_by_category(self, category):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM quotes WHERE category = ?', (category,))
        quotes = cursor.fetchall()
        conn.close()
        return quotes

    def get_random_quote(self, category=None, user_id=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
        cache_key = f"{user_id}_{category}_{date.today()}" if user_id and category else f"general_{date.today()}"
        used_quotes = USED_CONTENT_CACHE.get(cache_key, set())

        if category:
            cursor.execute('SELECT * FROM quotes WHERE category = ?', (category,))
        else:
            cursor.execute('SELECT * FROM quotes')

        quotes = cursor.fetchall()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        available_quotes = [q for q in quotes if hashlib.md5(str(q).encode()).hexdigest() not in used_quotes]

        if not available_quotes:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
            USED_CONTENT_CACHE[cache_key] = set()
            available_quotes = quotes

        if not available_quotes:
            conn.close()
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
        quote = random.choice(available_quotes)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        USED_CONTENT_CACHE.setdefault(cache_key, set()).add(hashlib.md5(str(quote).encode()).hexdigest())

        conn.close()
        return quote

    def get_quotes_count(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM quotes')
        count = cursor.fetchone()[0]
        conn.close()
        return count

    def clear_quotes(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM quotes')
        conn.commit()
        conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

def get_random_image(category, user_id=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    folder = IMAGE_FOLDERS.get(category)
    if not folder or not os.path.exists(folder):
        return None

    images = [f for f in os.listdir(folder) if f.endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    if not images:
        return None

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cache_key = f"{user_id}_{category}_{date.today()}"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    used_images = USED_CONTENT_CACHE.get(cache_key, set())

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    available_images = [img for img in images if img not in used_images]

    if not available_images:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        USED_CONTENT_CACHE[cache_key] = set()
        available_images = images

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    selected_image = random.choice(available_images)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    USED_CONTENT_CACHE.setdefault(cache_key, set()).add(selected_image)

    return os.path.join(folder, selected_image)

def get_random_quote_image(user_id=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—á–µ–Ω—å–∫–∏"""
    folder = RANDOM_QUOTE_IMAGE_FOLDER
    if not os.path.exists(folder):
        return None

    images = [f for f in os.listdir(folder) if f.endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    if not images:
        return None

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cache_key = f"{user_id}_random_quote_{date.today()}"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    used_images = USED_CONTENT_CACHE.get(cache_key, set())

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    available_images = [img for img in images if img not in used_images]

    if not available_images:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        USED_CONTENT_CACHE[cache_key] = set()
        available_images = images

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    selected_image = random.choice(available_images)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    USED_CONTENT_CACHE.setdefault(cache_key, set()).add(selected_image)

    return os.path.join(folder, selected_image)

def get_random_start_image():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
    if not os.path.exists(START_IMAGE_FOLDER):
        return None
    images = [f for f in os.listdir(START_IMAGE_FOLDER) if f.endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    if not images:
        return None
    return os.path.join(START_IMAGE_FOLDER, random.choice(images))

async def load_builtin_quotes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM quotes WHERE source = ?', ("–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞",))
        conn.commit()
        conn.close()

        loaded_count = 0
        for category, quotes in BUILTIN_QUOTES.items():
            for quote_data in quotes:
                author = quote_data.get("author", None)
                db.add_quote(quote_data["text"], author, category, "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞")
                loaded_count += 1

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç")
        for category in BUILTIN_QUOTES.keys():
            count = len(db.get_quotes_by_category(category))
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}': {count} —Ü–∏—Ç–∞—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç: {e}")

def create_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    for key in ["love", "self", "work", "friendship", "memes"]:
        builder.button(
            text=CATEGORIES[key]["name"],
            callback_data=f"category_{key}",
        )
    builder.adjust(2)
    builder.button(text="üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", callback_data="random_action")
    builder.adjust(1)
    return builder.as_markup()

def create_limit_reached_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª—É—á–∞—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="show_categories")
    builder.button(text="üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", callback_data="random_action")
    builder.adjust(1)
    return builder.as_markup()

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—á–µ–Ω—å–∫–∞")],
            [KeyboardButton(text="üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ")],
            [KeyboardButton(text="üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def format_quote(quote_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if isinstance(quote_data, tuple):
        _, text, author, category, _ = quote_data
    else:
        text = quote_data.get('text', '')
        author = quote_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        category = quote_data.get('category', '')

    emoji = "üí≠"
    if category in CATEGORIES:
        emoji = CATEGORIES[category]["name"].split()[0]

    formatted = f"{emoji} *{text}*\n\n"
    if author:
        formatted += f"‚Äî _{author}_"

    return formatted

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)

    start_image_path = get_random_start_image()
    if not start_image_path:
        await message.answer(
            "üòî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–µ—á–µ–Ω—å–∫–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –∂–¥—É—Ç —Ç–µ–±—è!",
            reply_markup=create_main_keyboard()
        )
        return

    start_keyboard = InlineKeyboardBuilder()
    start_keyboard.button(text="üöÄ –ü–û–ï–•–ê–õ–ò", callback_data="start_next_step")
    start_keyboard.adjust(1)

    welcome_text = (
        "üç™ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cookie Lucky Bot!* üç™\n\n"
        "–ú—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ–º –º–µ—Å–∏—Ç—å —Ç–µ—Å—Ç–æ, —á—Ç–æ–±—ã —Ç–µ–±–µ –¥–æ—Å—Ç–∞–ª–∞—Å—å —Ç–≤–æ—è –ø–µ—á–µ–Ω—å–∫–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º. "
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ö–≤–∞—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã!"
    )
    photo = FSInputFile(start_image_path)
    await message.bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=welcome_text,
        reply_markup=start_keyboard.as_markup(),
        parse_mode="Markdown"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

async def handle_start_next_step_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–û–ï–•–ê–õ–ò'"""
    second_keyboard = InlineKeyboardBuilder()
    second_keyboard.button(text="üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="show_categories")
    second_keyboard.button(text="üéØ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", callback_data="random_action")
    second_keyboard.adjust(2)

    second_text = (
        "üöÄ *–ù–∞—á–Ω–∏ —Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–∏–º–∏ –≤—ã–∑–æ–≤!*"
    )
    await callback.message.answer(
        second_text,
        reply_markup=second_keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def cmd_categories(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories"""
    await message.answer(
        "*–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—á–µ–Ω—å–∫–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å* üç™",
        reply_markup=create_categories_keyboard(),
        parse_mode="Markdown"
    )

async def cmd_quote(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quote"""
    user_id = message.from_user.id
    if db.check_category_usage(user_id, "random_quote"):
        await message.answer(
            "üòî *–¢—ã —É–∂–µ —Å—ä–µ–ª —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—á–µ–Ω—å–∫—É. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ–π –ø–µ—á–µ–Ω—å–∫–æ–π!*",
            reply_markup=create_limit_reached_keyboard(),
            parse_mode="Markdown"
        )
        return

    quote = db.get_random_quote(user_id=user_id)
    if not quote:
        await message.answer(
            "üòî –¶–∏—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /reload",
            reply_markup=create_main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ memes_images
    image_path = get_random_quote_image(user_id)
    if not image_path:
        await message.answer(
            "üòî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –≤–æ—Ç —Ç–≤–æ—è –ø–µ—á–µ–Ω—å–∫–∞!",
            reply_markup=create_main_keyboard()
        )
        await message.answer(
            format_quote(quote),
            parse_mode="Markdown"
        )
        return

    db.update_user_stats(user_id)
    db.mark_category_used(user_id, "random_quote")
    caption = format_quote(quote)
    photo = FSInputFile(image_path)
    await message.bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=caption,
        parse_mode="Markdown"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="show_categories")
    keyboard.button(text="üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", callback_data="random_action")
    keyboard.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:",
        reply_markup=keyboard.as_markup()
    )

async def cmd_todo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /todo - —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    user_id = message.from_user.id
    if db.check_category_usage(user_id, "random_action"):
        await message.answer(
            "üòî *–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è!*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º!",
            reply_markup=create_limit_reached_keyboard(),
            parse_mode="Markdown"
        )
        return

    action = random.choice(RANDOM_ACTIONS)
    db.mark_category_used(user_id, "random_action")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üç™ –õ—É—á—à–µ –ø–µ—á–µ–Ω—å–∫—É", callback_data="show_categories")
    keyboard.adjust(1)

    formatted = f"üéØ *–¢–≤–æ–π –≤—ã–∑–æ–≤ –¥–Ω—è:*\n\n{action}\n\n_–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?_ üí™"
    await message.answer(
        formatted,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_stats = db.get_user_stats(message.from_user.id)
    if not user_stats:
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=create_main_keyboard()
        )
        return

    total_quotes = db.get_quotes_count()
    stats_text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üç™ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—á–µ–Ω–µ–∫: {user_stats[5]}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_stats[4][:10]}\n"
        f"üìö –í—Å–µ–≥–æ –ø–µ—á–µ–Ω–µ–∫ –≤ –±–∞–∑–µ: {total_quotes}\n"
        f"‚≠ê –õ—é–±–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user_stats[6] or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}"
    )

    await message.answer(
        stats_text,
        parse_mode="Markdown",
        reply_markup=create_main_keyboard()
    )

async def cmd_reload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload"""
    await load_builtin_quotes()
    count = db.get_quotes_count()
    await message.answer(
        f"üîÑ –ë–∞–∑–∞ –ø–µ—á–µ–Ω–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\nüç™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –ø–µ—á–µ–Ω–µ–∫",
        reply_markup=create_main_keyboard()
    )

async def cmd_debug(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /debug - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    debug_text = "*üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n"

    for category in BUILTIN_QUOTES.keys():
        quotes_count = len(db.get_quotes_by_category(category))
        debug_text += f"üìÇ {CATEGORIES[category]['name']}: {quotes_count} —Ü–∏—Ç–∞—Ç\n"

    total_count = db.get_quotes_count()
    debug_text += f"\nüìö –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –≤ –±–∞–∑–µ: {total_count}"

    await message.answer(
        debug_text,
        parse_mode="Markdown",
        reply_markup=create_main_keyboard()
    )

def get_random_donate_image():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    donate_folder = "/root/bot/cookies/donate_picture"
    if not os.path.exists(donate_folder):
        print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {donate_folder}")
        return None
    images = [f for f in os.listdir(donate_folder) if f.endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    if not images:
        print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ {donate_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    return os.path.join(donate_folder, random.choice(images))

async def cmd_support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    support_text = (
        "üíñ *–ï—Å–ª–∏ —ç—Ç–æ—Ç –±–æ—Ç –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç—å —Ç–µ–ø–ª–µ–µ - –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É, "
        "–∑–∞–∫–∏–Ω—É–≤ –ª—é–±—É—é —Å—É–º–º—É –Ω–∞ —Ç–µ—Å—Ç–æ, —Å–∞—Ö–∞—Ä –∏ –∫—Ä–∞—Å–æ—Ç—É!* "
        "[–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å](https://pay.cloudtips.ru/p/93ad89fe)"
    )
    donate_image_path = get_random_donate_image()
    if donate_image_path:
        photo = FSInputFile(donate_image_path)
        await message.answer_photo(
            photo=photo,
            caption=support_text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=create_main_keyboard()
        )
    else:
        await message.answer(
            support_text,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=create_main_keyboard()
        )

async def handle_keyboard_buttons(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    text = message.text

    if text == "üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await cmd_categories(message)
    elif text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—á–µ–Ω—å–∫–∞":
        await cmd_quote(message)
    elif text == "üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ":
        await cmd_todo(message)
    elif text == "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞":
        await cmd_support(message)
    else:
        await message.answer(
            "üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è!",
            reply_markup=create_main_keyboard()
        )

async def handle_category_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.replace("category_", "")
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if db.check_category_usage(user_id, category):
        await callback.message.answer(
            "üòî *–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã —É–∂–µ —Å—ä–µ–ª–∏ –ø–µ—á–µ–Ω—å–∫—É —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ —Å–≤–µ–∂–µ–π –≤—ã–ø–µ—á–∫–æ–π!",
            reply_markup=create_limit_reached_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    image_path = get_random_image(category, user_id)
    if not image_path:
        await callback.answer(
            f"üòî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORIES[category]['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            show_alert=True
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
    quote = db.get_random_quote(category, user_id)
    if not quote:
        await callback.answer(
            f"üòî –ü–µ—á–µ–Ω–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORIES[category]['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
        return

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
    db.mark_category_used(user_id, category)
    db.update_user_stats(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    caption = format_quote(quote)
    photo = FSInputFile(image_path)
    await callback.bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo,
        caption=caption,
        parse_mode="Markdown"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="show_categories")
    keyboard.button(text="üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", callback_data="random_action")
    keyboard.adjust(2)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

async def handle_random_action_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    user_id = callback.from_user.id
    if db.check_category_usage(user_id, "random_action"):
        await callback.message.answer(
            "üòî *–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è!*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º!",
            reply_markup=create_limit_reached_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    action = random.choice(RANDOM_ACTIONS)
    db.mark_category_used(user_id, "random_action")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üç™ –õ—É—á—à–µ –ø–µ—á–µ–Ω—å–∫—É", callback_data="show_categories")
    keyboard.adjust(1)

    formatted = f"üéØ *–¢–≤–æ–π –≤—ã–∑–æ–≤ –¥–Ω—è:*\n\n{action}\n\n_–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?_ üí™"
    await callback.message.answer(
        formatted,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def handle_show_categories_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await callback.message.answer(
        "*–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—á–µ–Ω—å–∫–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å* üç™",
        reply_markup=create_categories_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def send_daily_notification(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db.get_all_users()
    daily_message = (
        "üç™ *–ü—Ä–∏–≤–µ—Ç –æ—Ç —Ç–≤–æ–µ–π –ü–µ—á–µ–Ω—å–∫–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏!* ‚ú®\n\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞—è –ø–æ—Ä—Ü–∏—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–µ—á–µ–Ω—å–∫—É –∏–ª–∏ –ø—Ä–∏–º–∏ –≤—ã–∑–æ–≤!\n\n"
        "üç™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "üéØ –ü–µ—á–µ–Ω—å–∫–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!"
    )
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id, text=daily_message, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def schedule_tasks(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    schedule.every().day.at("08:00").do(lambda: asyncio.create_task(send_daily_notification(bot)))
    schedule.every().wednesday.at("14:00").do(lambda: asyncio.create_task(send_weekly_notification(bot)))

    while True:
        schedule.run_pending()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
    await load_builtin_quotes()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_categories, Command("categories"))
    dp.message.register(cmd_quote, Command("quote"))
    dp.message.register(cmd_todo, Command("todo"))
    dp.message.register(cmd_stats, Command("stats"))
    dp.message.register(cmd_reload, Command("reload"))
    dp.message.register(cmd_debug, Command("debug"))
    dp.message.register(cmd_support, Command("support"))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    dp.message.register(handle_keyboard_buttons)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.callback_query.register(handle_category_callback, F.data.startswith("category_"))
    dp.callback_query.register(handle_random_action_callback, F.data == "random_action")
    dp.callback_query.register(handle_show_categories_callback, F.data == "show_categories")
    dp.callback_query.register(handle_start_next_step_callback, F.data == "start_next_step")

    print("üöÄ Cookie Lucky Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üç™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {db.get_quotes_count()} –ø–µ—á–µ–Ω–µ–∫")
    print("üéØ Cookie Lucky Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(schedule_tasks(bot))

    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É schedule
    try:
        import schedule
    except ImportError:
        print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'schedule' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é 'pip install schedule'")
        sys.exit(1)
    asyncio.run(main())
